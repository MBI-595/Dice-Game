# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'score_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QPixmap
from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QThread
import cv2
import os
from ultralytics import YOLO
import numpy as np
from PyQt5.QtGui import QImage
import terminate_window  # import Ui_QuitWindow


class Ui_QgameWindow(object):

    def openplaywindow(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = terminate_window.Ui_QuitWindow()
        self.ui.setupUi(self.window)
        QgameWindow.hide()
        self.window.show()

    def setupUi(self, QgameWindow):
        QgameWindow.setObjectName("QgameWindow")
        QgameWindow.resize(567, 648)
        self.QLabel = QtWidgets.QLabel(QgameWindow)
        self.QLabel.setGeometry(QtCore.QRect(30, 50, 381, 331))
        self.QLabel.setObjectName("QGraphicsView")
        self.pushButton = QtWidgets.QPushButton(QgameWindow)
        self.pushButton.setGeometry(QtCore.QRect(40, 20, 191, 23))
        self.pushButton.setObjectName("pushButton")
        self.QPlainTextEdit = QtWidgets.QPlainTextEdit(QgameWindow)
        self.QPlainTextEdit.setGeometry(QtCore.QRect(50, 390, 161, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.QPlainTextEdit.setFont(font)
        self.QPlainTextEdit.setObjectName("QPlainTextEdit")

        self.pushButton.clicked.connect(self.pushButton_handler)

        self.retranslateUi(QgameWindow)
        QtCore.QMetaObject.connectSlotsByName(QgameWindow)

    def pushButton_handler(self):

        model = YOLO(
            "D:\myvenv\Dice_Game\\runs\detect\\train2\weights\\best.pt")

        folder = 'Test\Images'

        images = []
        for filename in os.listdir(folder):
            img = cv2.imread(os.path.join(folder, filename))
            if img is not None:
                images.append(img)

        threshold = 0.7

        names = ["1", "2", "3", "4", "5", "6"]

        user_score = 0
        j = 0
        dice1 = 0
        dice2 = 0
        for i in images:
            j += 1
            results = model(i)[0]

            flag = True

            img_score = 0

            for result in results.boxes.data.tolist():
                x1, y1, x2, y2, score, class_id = result

                if score > threshold:
                    cv2.rectangle(i, (int(x1), int(y1)),
                                  (int(x2), int(y2)), (0, 255, 0), 4)
                    cv2.putText(i, names[int(class_id)].upper(), (int(x1), int(y1 - 10)),
                                cv2.FONT_HERSHEY_SIMPLEX, 1.3, (0, 255, 0), 3, cv2.LINE_AA)

                    if flag:
                        dice1 = int(names[int(class_id)].upper())
                    else:
                        dice2 = int(names[int(class_id)].upper())

                    img_score = img_score + int(names[int(class_id)].upper())

                    flag = False

            print("Dice 1:", dice1)
            print("Dice 2:", dice2)

            height, width, channel = i.shape
            bytesPerLine = 3 * width
            qImg = QImage(i.data, width, height,
                          bytesPerLine, QImage.Format_RGB888)
            if dice1 == dice2:
                self.QLabel.setPixmap(QPixmap(qImg))
                display_score = "Game Over!!! Final Score: " + str(user_score)
                print("Game Over")
                print("Final Score is: ", user_score)
                break

            self.QLabel.setPixmap(QPixmap(qImg))
            user_score = user_score + img_score
            print("Score for image", j, "is:", user_score)
            display_score = "Score: " + str(user_score)
            self.QPlainTextEdit.setPlainText(display_score)
            self.openplaywindow

    def retranslateUi(self, QgameWindow):
        _translate = QtCore.QCoreApplication.translate
        QgameWindow.setWindowTitle(_translate("QgameWindow", "Dialog"))
        self.pushButton.setText(_translate("QgameWindow", "Roll The Dice"))
        self.QPlainTextEdit.setPlainText(_translate("QgameWindow", "Score=0"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    QgameWindow = QtWidgets.QDialog()
    ui = Ui_QgameWindow()
    ui.setupUi(QgameWindow)
    QgameWindow.show()
    sys.exit(app.exec_())
